name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build dtctl for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.16']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      # Build on Windows
      - name: Build on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Create builds directory
          New-Item -ItemType Directory -Force -Path builds
          # Set environment variables
          $env:GOOS = 'windows'
          $env:GOARCH = 'amd64'
          # Build the executable
          go build -o dtctl.exe
          # Compress the executable
          Compress-Archive -Path dtctl.exe -DestinationPath builds/dtctl-windows-${{ matrix.go-version }}.zip

      # Build on macOS and Linux
      - name: Build on macOS and Linux
        if: runner.os != 'Windows'
        run: |
          mkdir -p builds
          GOOS=$(uname | tr '[:upper:]' '[:lower:]')
          GOARCH=amd64
          go build -o dtctl
          zip -j builds/dtctl-${GOOS}-${{ matrix.go-version }}.zip dtctl

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: dtctl-${{ matrix.os }}-${{ matrix.go-version }}
          path: builds/dtctl-*.zip

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: builds

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          artifacts: "builds/*"
          token: ${{ secrets.GITHUB_TOKEN }}
